// Code generated by go run generate.go.

// Copyright 2017 Tom Thorogood. All rights reserved.
// Use of this source code is governed by a
// Modified BSD License that can be found in
// the LICENSE file.

package counters

import (
	"math"
	"sync/atomic"

	"github.com/golang/sync/syncmap"
)

// Float64 provides a map of atomic counters of type float64.
type Float64 struct {
	m syncmap.Map // map[interface{}]*uint64
}

func (c *Float64) unsafeLoad(key interface{}) *uint64 {
	v, _ := c.m.LoadOrStore(key, new(uint64))
	return v.(*uint64)
}

// Load returns the value of the counter key.
func (c *Float64) Load(key interface{}) (val float64) {
	return math.Float64frombits(atomic.LoadUint64(c.unsafeLoad(key)))
}

// Store sets the value of the counter key.
func (c *Float64) Store(key interface{}, val float64) {
	atomic.StoreUint64(c.unsafeLoad(key), math.Float64bits(val))
}

// Swap sets the value of the counter key and returns the
// old value.
func (c *Float64) Swap(key interface{}, new float64) (old float64) {
	return math.Float64frombits(atomic.SwapUint64(c.unsafeLoad(key), math.Float64bits(new)))
}

// CompareAndSwap sets the value of the counter key to new
// but only if it currently has the value old.
func (c *Float64) CompareAndSwap(key interface{}, old, new float64) (swapped bool) {
	return atomic.CompareAndSwapUint64(c.unsafeLoad(key), math.Float64bits(old), math.Float64bits(new))
}

// Reset is a wrapper for Swap(key, 0).
func (c *Float64) Reset(key interface{}) (old float64) {
	return c.Swap(key, 0)
}

// Delete removes the counter key from the map.
func (c *Float64) Delete(key interface{}) {
	c.m.Delete(key)
}

// Keys returns the list of all counters.
func (c *Float64) Keys() []interface{} {
	var keys []interface{}
	c.m.Range(func(key, val interface{}) bool {
		keys = append(keys, key)
		return true
	})
	return keys
}

// RangeKeys calls f with the key of each counter.
func (c *Float64) RangeKeys(f func(key interface{}) bool) {
	c.m.Range(func(key, val interface{}) bool {
		return f(key)
	})
}

// RangeLoad calls f with the value of each counter.
func (c *Float64) RangeLoad(f func(key interface{}, val float64) bool) {
	c.m.Range(func(key, val interface{}) bool {
		return f(key, math.Float64frombits(atomic.LoadUint64(val.(*uint64))))
	})
}

// RangeStore sets each counter to the return value of f.
func (c *Float64) RangeStore(f func(key interface{}) (val float64, ok bool)) {
	c.m.Range(func(key, val interface{}) bool {
		v, ok := f(key)
		atomic.StoreUint64(val.(*uint64), math.Float64bits(v))
		return ok
	})
}

// RangeReset resets each counter and calls f with the
// old value.
func (c *Float64) RangeReset(f func(key interface{}, old float64) bool) {
	c.m.Range(func(key, val interface{}) bool {
		return f(key, math.Float64frombits(atomic.SwapUint64(val.(*uint64), 0)))
	})
}
