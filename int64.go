// Code generated by go run generate.go.

// Copyright 2017 Tom Thorogood. All rights reserved.
// Use of this source code is governed by a
// Modified BSD License that can be found in
// the LICENSE file.

package counters

import (
	"sync/atomic"

	"github.com/golang/sync/syncmap"
)

// Int64 provides a map of atomic counters of type int64.
type Int64 struct {
	m syncmap.Map // map[interface{}]*int64
}

// UnsafeLoad returns a pointer to the counter key.
//
// It is only safe to access the return value with
// methods from the sync/atomic package. It must
// not be manually dereferenced.
func (c *Int64) UnsafeLoad(key interface{}) *int64 {
	v, _ := c.m.LoadOrStore(key, new(int64))
	return v.(*int64)
}

// Load returns the value of the counter key.
func (c *Int64) Load(key interface{}) (val int64) {
	return atomic.LoadInt64(c.UnsafeLoad(key))
}

// Store sets the value of the counter key.
func (c *Int64) Store(key interface{}, val int64) {
	atomic.StoreInt64(c.UnsafeLoad(key), val)
}

// Swap sets the value of the counter key and returns the
// old value.
func (c *Int64) Swap(key interface{}, new int64) (old int64) {
	return atomic.SwapInt64(c.UnsafeLoad(key), new)
}

// CompareAndSwap sets the value of the counter key to new
// but only if it currently has the value old.
func (c *Int64) CompareAndSwap(key interface{}, old, new int64) (swapped bool) {
	return atomic.CompareAndSwapInt64(c.UnsafeLoad(key), old, new)
}

// Add adds delta to the counter key.
func (c *Int64) Add(key interface{}, delta int64) (new int64) {
	return atomic.AddInt64(c.UnsafeLoad(key), delta)
}

// Increment is a wrapper for Add(key, 1).
func (c *Int64) Increment(key interface{}) (new int64) {
	return c.Add(key, 1)
}

// Subtract is a wrapper for Add(key, -delta)
func (c *Int64) Subtract(key interface{}, delta int64) (new int64) {
	return c.Add(key, -delta)
}

// Decrement is a wrapper for Add(key, -1).
func (c *Int64) Decrement(key interface{}) (new int64) {
	return c.Add(key, -1)
}

// Reset is a wrapper for Swap(key, 0).
func (c *Int64) Reset(key interface{}) (old int64) {
	return c.Swap(key, 0)
}

// Delete removes the counter key from the map.
func (c *Int64) Delete(key interface{}) {
	c.m.Delete(key)
}

// Keys returns the list of all counters.
func (c *Int64) Keys() []interface{} {
	var keys []interface{}
	c.m.Range(func(key, val interface{}) bool {
		keys = append(keys, key)
		return true
	})
	return keys
}

// UnsafeRange calls f with a pointer to each
// counter.
//
// It is only safe to access val with methods from
// the sync/atomic package. It must not be manually
// dereferenced.
func (c *Int64) UnsafeRange(f func(key interface{}, val *int64) bool) {
	c.m.Range(func(key, val interface{}) bool {
		return f(key, val.(*int64))
	})
}

// RangeKeys calls f with the key of each counter.
func (c *Int64) RangeKeys(f func(key interface{}) bool) {
	c.m.Range(func(key, val interface{}) bool {
		return f(key)
	})
}

// RangeLoad calls f with the value of each counter.
func (c *Int64) RangeLoad(f func(key interface{}, val int64) bool) {
	c.m.Range(func(key, val interface{}) bool {
		return f(key, atomic.LoadInt64(val.(*int64)))
	})
}

// RangeStore sets each counter to the return value of f.
func (c *Int64) RangeStore(f func(key interface{}) (val int64, ok bool)) {
	c.m.Range(func(key, val interface{}) bool {
		v, ok := f(key)
		atomic.StoreInt64(val.(*int64), v)
		return ok
	})
}

// RangeAdd adds the return value of f to each counter.
func (c *Int64) RangeAdd(f func(key interface{}) (delta int64, ok bool)) {
	c.m.Range(func(key, val interface{}) bool {
		delta, ok := f(key)
		atomic.AddInt64(val.(*int64), delta)
		return ok
	})
}

// RangeSubtract subtracts the return value of f from
// each counter.
func (c *Int64) RangeSubtract(f func(key interface{}) (delta int64, ok bool)) {
	c.m.Range(func(key, val interface{}) bool {
		delta, ok := f(key)
		atomic.AddInt64(val.(*int64), -delta)
		return ok
	})
}

// RangeReset resets each counter and calls f with the
// old value.
func (c *Int64) RangeReset(f func(key interface{}, old int64) bool) {
	c.m.Range(func(key, val interface{}) bool {
		return f(key, atomic.SwapInt64(val.(*int64), 0))
	})
}
