// Code generated by go run generate-tests.go.

// Copyright 2017 Tom Thorogood. All rights reserved.
// Use of this source code is governed by a
// Modified BSD License that can be found in
// the LICENSE file.

package atomics

import (
	"testing"
	"testing/quick"
)

func TestNewFloat64(t *testing.T) {
	if NewFloat64(0) == nil {
		t.Fatal("NewFloat64 returned nil")
	}
}

func TestFloat64UnsafeRaw(t *testing.T) {
	var c Float64
	if c.UnsafeRaw() == nil {
		t.Fatal("UnsafeRaw returned nil")
	}
}

func TestFloat64Load(t *testing.T) {
	if err := quick.Check(func(v float64) bool {
		return NewFloat64(v).Load() == v
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestFloat64Store(t *testing.T) {
	if err := quick.Check(func(v float64) bool {
		var c Float64
		c.Store(v)
		return c.Load() == v
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestFloat64Swap(t *testing.T) {
	if err := quick.Check(func(old, new float64) bool {
		c := NewFloat64(old)
		return c.Swap(new) == old && c.Load() == new
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestFloat64CompareAndSwap(t *testing.T) {
	if err := quick.Check(func(old, new float64) bool {
		c := NewFloat64(old)
		return !c.CompareAndSwap(-old, new) &&
			c.Load() == old &&
			c.CompareAndSwap(old, new) &&
			c.Load() == new
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestFloat64Add(t *testing.T) {
	if err := quick.Check(func(v, delta float64) bool {
		c := NewFloat64(v)
		v += delta
		return c.Add(delta) == v && c.Load() == v
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestFloat64Increment(t *testing.T) {
	if err := quick.Check(func(v float64) bool {
		c := NewFloat64(v)
		v++
		return c.Increment() == v && c.Load() == v
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestFloat64Subtract(t *testing.T) {
	if err := quick.Check(func(v, delta float64) bool {
		c := NewFloat64(v)
		v -= delta
		return c.Subtract(delta) == v && c.Load() == v
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestFloat64Decrement(t *testing.T) {
	if err := quick.Check(func(v float64) bool {
		c := NewFloat64(v)
		v--
		return c.Decrement() == v && c.Load() == v
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestFloat64Reset(t *testing.T) {
	if err := quick.Check(func(v float64) bool {
		c := NewFloat64(v)
		return c.Reset() == v && c.Load() == 0
	}, nil); err != nil {
		t.Fatal(err)
	}
}
