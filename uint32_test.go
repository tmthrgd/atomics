// Code generated by go run generate-tests.go.

// Copyright 2017 Tom Thorogood. All rights reserved.
// Use of this source code is governed by a
// Modified BSD License that can be found in
// the LICENSE file.

package atomics

import (
	"testing"
	"testing/quick"
)

func TestUint32Default(t *testing.T) {
	var c Uint32
	if c.Load() != 0 {
		t.Fatal("invalid default value")
	}
}

func TestNewUint32(t *testing.T) {
	if NewUint32(0) == nil {
		t.Fatal("NewUint32 returned nil")
	}
}

func TestUint32UnsafeRaw(t *testing.T) {
	var c Uint32
	if c.UnsafeRaw() == nil {
		t.Fatal("UnsafeRaw returned nil")
	}
}

func TestUint32Load(t *testing.T) {
	if err := quick.Check(func(v uint32) bool {
		return NewUint32(v).Load() == v
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestUint32Store(t *testing.T) {
	if err := quick.Check(func(v uint32) bool {
		var c Uint32
		c.Store(v)
		return c.Load() == v
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestUint32Swap(t *testing.T) {
	if err := quick.Check(func(old, new uint32) bool {
		c := NewUint32(old)
		return c.Swap(new) == old && c.Load() == new
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestUint32CompareAndSwap(t *testing.T) {
	if err := quick.Check(func(old, new uint32) bool {
		c := NewUint32(old)
		return !c.CompareAndSwap(-old, new) &&
			c.Load() == old &&
			c.CompareAndSwap(old, new) &&
			c.Load() == new
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestUint32Add(t *testing.T) {
	if err := quick.Check(func(v, delta uint32) bool {
		c := NewUint32(v)
		v += delta
		return c.Add(delta) == v && c.Load() == v
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestUint32Increment(t *testing.T) {
	if err := quick.Check(func(v uint32) bool {
		c := NewUint32(v)
		v++
		return c.Increment() == v && c.Load() == v
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestUint32Subtract(t *testing.T) {
	if err := quick.Check(func(v, delta uint32) bool {
		c := NewUint32(v)
		v -= delta
		return c.Subtract(delta) == v && c.Load() == v
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestUint32Decrement(t *testing.T) {
	if err := quick.Check(func(v uint32) bool {
		c := NewUint32(v)
		v--
		return c.Decrement() == v && c.Load() == v
	}, nil); err != nil {
		t.Fatal(err)
	}
}

func TestUint32Reset(t *testing.T) {
	if err := quick.Check(func(v uint32) bool {
		c := NewUint32(v)
		return c.Reset() == v && c.Load() == 0
	}, nil); err != nil {
		t.Fatal(err)
	}
}
